{-

Properties of Subsets

-}
{-# OPTIONS --safe #-}
module Classical.Foundations.Powerset.Properties where

open import Cubical.Foundations.Prelude
open import Cubical.Data.Empty as Empty
open import Cubical.Data.Sum
open import Cubical.Data.Sigma
open import Cubical.HITs.PropositionalTruncation as Prop
open import Cubical.Relation.Nullary

open import Classical.Axioms
open import Classical.Foundations.Powerset.Base
open import Classical.Foundations.Powerset.Membership
open import Classical.Foundations.Powerset.Boolean

private
  variable
    â„“ â„“' : Level
    X : Type â„“
    Y : Type â„“'


module _ â¦ƒ ðŸ¤– : Oracle â¦„ where


  {-

    Singleton Subset

  -}

  -- Subset with one-element

  [_] : X â†’ â„™ X
  [_] x = specify Î» y â†’ âˆ¥ x â‰¡ y âˆ¥ , squash

  xâˆˆ[x] : {x : X} â†’ x âˆˆ [ x ]
  xâˆˆ[x] {x = x} = Inhabâ†’âˆˆ (Î» y â†’ âˆ¥ x â‰¡ y âˆ¥ , squash) âˆ£ refl âˆ£

  yâˆˆ[x]â†’âˆ¥xâ‰¡yâˆ¥ : {x y : X} â†’ y âˆˆ [ x ] â†’ âˆ¥ x â‰¡ y âˆ¥
  yâˆˆ[x]â†’âˆ¥xâ‰¡yâˆ¥ {x = x} = âˆˆâ†’Inhab (Î» y â†’ âˆ¥ x â‰¡ y âˆ¥ , squash)

  AâŠ†[x]â†’Aâ‰¡âˆ…/[x] : {A : â„™ X}{x : X} â†’ A âŠ† [ x ] â†’ (A â‰¡ âˆ…) âŠŽ (A â‰¡ [ x ])
  AâŠ†[x]â†’Aâ‰¡âˆ…/[x] {X = X} {A = A} {x = x} AâŠ†[x] = case-split (dichotomyâˆˆ x A)
    where
    case-split : Dichotomyâˆˆ x A â†’ _
    case-split (yeah xâˆˆA) = inr (biâŠ†â†’â‰¡ AâŠ†[x] [x]âŠ†A)
      where
      [x]âŠ†A : [ x ] âŠ† A
      [x]âŠ†A yâˆˆ[x] = Prop.rec (isPropâˆˆ A)
        (Î» xâ‰¡y â†’ subst (_âˆˆ A) xâ‰¡y xâˆˆA)
        (yâˆˆ[x]â†’âˆ¥xâ‰¡yâˆ¥ yâˆˆ[x])
    case-split (nope xâˆ‰A) = inl (Aâ‰¡âˆ… (Î» y â†’ Â¬âˆˆâ†’âˆ‰ {A = A} (âˆ€Â¬xâˆˆA y)))
      where
      âˆ€Â¬xâˆˆA : (y : X) â†’ Â¬ y âˆˆ A
      âˆ€Â¬xâˆˆA y yâˆˆA = Prop.rec isPropâŠ¥
        (Î» xâ‰¡y â†’ âˆ‰â†’Â¬âˆˆ {A = A} xâˆ‰A (subst (_âˆˆ A) (sym xâ‰¡y) yâˆˆA))
        (yâˆˆ[x]â†’âˆ¥xâ‰¡yâˆ¥ (AâŠ†[x] yâˆˆA))

  AâˆˆSâ†’[A]âŠ†S : {A : â„™ X}{S : â„™ (â„™ X)} â†’ A âˆˆ S â†’ [ A ] âŠ† S
  AâˆˆSâ†’[A]âŠ†S {S = S} AâˆˆS Bâˆˆ[A] =
    Prop.rec (isPropâˆˆ S) (Î» Aâ‰¡B â†’ subst (_âˆˆ S) Aâ‰¡B AâˆˆS) (yâˆˆ[x]â†’âˆ¥xâ‰¡yâˆ¥ Bâˆˆ[A])

  [A]âŠ†Sâ†’AâˆˆS : {A : â„™ X}{S : â„™ (â„™ X)} â†’ [ A ] âŠ† S â†’ A âˆˆ S
  [A]âŠ†Sâ†’AâˆˆS [A]âŠ†S = [A]âŠ†S xâˆˆ[x]


  {-

    Image and Preimage under Functions

  -}

  image : (Y â†’ X) â†’ â„™ Y â†’ â„™ X
  image {Y = Y} f A = specify Î» x â†’ âˆ¥ Î£[ y âˆˆ Y ] (y âˆˆ A) Ã— (f y â‰¡ x) âˆ¥ , squash

  preimage : (Y â†’ X) â†’ â„™ X â†’ â„™ Y
  preimage f A y = A (f y)



  {-

    The Subset of â„™ X "Represented" by x âˆˆ X

  -}

  rep : (x : X) â†’ â„™ (â„™ X)
  rep x A = A x

  xâˆˆAâ‰¡Aâˆˆrepx : {x : X}{A : â„™ X} â†’ x âˆˆ A â‰¡ A âˆˆ rep x
  xâˆˆAâ‰¡Aâˆˆrepx = refl

  âˆ©-âˆˆrep : {x : X}(A B : â„™ X) â†’ A âˆˆ rep x â†’ B âˆˆ rep x â†’ (A âˆ© B) âˆˆ rep x
  âˆ©-âˆˆrep = âˆˆâ†’âˆˆâˆ©
