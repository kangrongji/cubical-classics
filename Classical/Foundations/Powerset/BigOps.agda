{-

Infinitary Operations

-}
{-# OPTIONS --safe #-}
module Classical.Foundations.Powerset.BigOps where

open import Cubical.Foundations.Prelude
open import Cubical.Foundations.Function
open import Cubical.Data.Empty as Empty
open import Cubical.Data.Sum
open import Cubical.Data.Sigma
open import Cubical.HITs.PropositionalTruncation as Prop
open import Cubical.Relation.Nullary

open import Classical.Axioms
open import Classical.Preliminary.Logic
open import Classical.Foundations.Powerset.Base
open import Classical.Foundations.Powerset.Membership
open import Classical.Foundations.Powerset.Boolean
open import Classical.Foundations.Powerset.Properties

private
  variable
    â„“ : Level
    X : Type â„“


module _ â¦ƒ ðŸ¤– : Oracle â¦„ where


  {-

    Arbitrary Union

  -}

  -- Union of arbitrary collection of subsets

  union : â„™ (â„™ X) â†’ â„™ X
  union {X = X} S = specify Î» x â†’ âˆ¥ Î£[ A âˆˆ â„™ X ] (x âˆˆ A) Ã— (A âˆˆ S) âˆ¥ , squash


  module _
    {S : â„™ (â„™ X)}{x : X} where

    âˆˆunionâ†’âˆƒ : x âˆˆ union S â†’ âˆ¥ Î£[ A âˆˆ â„™ X ] (x âˆˆ A) Ã— (A âˆˆ S) âˆ¥
    âˆˆunionâ†’âˆƒ = âˆˆâ†’Inhab (Î» x â†’ âˆ¥ Î£[ A âˆˆ â„™ X ] (x âˆˆ A) Ã— (A âˆˆ S) âˆ¥ , squash)

    âˆƒâ†’âˆˆunion : âˆ¥ Î£[ A âˆˆ â„™ X ] (x âˆˆ A) Ã— (A âˆˆ S) âˆ¥ â†’ x âˆˆ union S
    âˆƒâ†’âˆˆunion = Inhabâ†’âˆˆ Î» x â†’ âˆ¥ Î£[ A âˆˆ â„™ X ] (x âˆˆ A) Ã— (A âˆˆ S) âˆ¥ , squash

    âˆ‰union : ((A : â„™ X) â†’ A âˆˆ S â†’ x âˆ‰ A) â†’ x âˆ‰ union S
    âˆ‰union p = Â¬âˆˆâ†’âˆ‰ {A = union S} (Â¬map âˆˆunionâ†’âˆƒ helper)
      where
      helper : Â¬ âˆ¥ Î£[ A âˆˆ â„™ X ] (x âˆˆ A) Ã— (A âˆˆ S) âˆ¥
      helper = Prop.rec isPropâŠ¥ (Î» (A , xâˆˆA , AâˆˆS) â†’ explodeâˆˆ {A = A} xâˆˆA (p _ AâˆˆS))


  âŠ†union : {S : â„™ (â„™ X)}{A B : â„™ X} â†’ A âŠ† B â†’ B âˆˆ S â†’ A âŠ† union S
  âŠ†union AâŠ†B BâˆˆS xâˆˆA = âˆƒâ†’âˆˆunion âˆ£ _  , AâŠ†B xâˆˆA , BâˆˆS âˆ£


  unionâˆ… : union {X = X} âˆ… â‰¡ âˆ…
  unionâˆ… = Aâ‰¡âˆ… (Î» U â†’ âˆ‰union (helper U))
    where
    helper : (x : X) â†’ (A : â„™ X) â†’ A âˆˆ âˆ… â†’ x âˆ‰ A
    helper _ A Aâˆˆâˆ… = explodeâˆˆ {x = A} Aâˆˆâˆ… (xâˆ‰âˆ… {x = A})

  unionâŠ† : {S : â„™ (â„™ X)}{A : â„™ X} â†’ ((U : â„™ X) â†’ U âˆˆ S â†’ U âŠ† A) â†’ union S âŠ† A
  unionâŠ† {X = X} {S = S} {A = A} UâˆˆSâ†’UâŠ†A {x = x} xâˆˆâˆªS = helper (âˆˆunionâ†’âˆƒ xâˆˆâˆªS)
    where
    helper : âˆ¥ Î£[ N âˆˆ â„™ X ] (x âˆˆ N) Ã— (N âˆˆ S) âˆ¥ â†’ x âˆˆ A
    helper = Prop.rec (isPropâˆˆ A) (Î» (_ , xâˆˆN , NâˆˆS) â†’ âˆˆâŠ†-trans {B = A} xâˆˆN (UâˆˆSâ†’UâŠ†A _ NâˆˆS))

  unionâˆª : {S T : â„™ (â„™ X)} â†’ union (S âˆª T) â‰¡ union S âˆª union T
  unionâˆª {S = S} {T = T} = biâŠ†â†’â‰¡ âˆª-SâˆªTâŠ†âˆªS-âˆª-âˆªT âˆªS-âˆª-âˆªTâŠ†âˆª-SâˆªT
    where
    âˆª-SâˆªTâŠ†âˆªS-âˆª-âˆªT : union (S âˆª T) âŠ† union S âˆª union T
    âˆª-SâˆªTâŠ†âˆªS-âˆª-âˆªT xâˆˆâˆª-SâˆªT = âˆˆA+âˆˆBâ†’âˆˆAâˆªB (union S) (union T)
      (Prop.map
      (Î» (A , xâˆˆA , AâˆˆSâˆªT) â†’
        case âˆˆAâˆªBâ†’âˆˆA+âˆˆB S T AâˆˆSâˆªT of Î»
        { (inl AâˆˆS) â†’ inl (âˆƒâ†’âˆˆunion âˆ£ A , xâˆˆA , AâˆˆS âˆ£)
        ; (inr AâˆˆT) â†’ inr (âˆƒâ†’âˆˆunion âˆ£ A , xâˆˆA , AâˆˆT âˆ£) })
      (âˆˆunionâ†’âˆƒ xâˆˆâˆª-SâˆªT))

    âˆªS-âˆª-âˆªTâŠ†âˆª-SâˆªT : union S âˆª union T âŠ† union (S âˆª T)
    âˆªS-âˆª-âˆªTâŠ†âˆª-SâˆªT xâˆˆâˆªS-âˆª-âˆªT = âˆƒâ†’âˆˆunion
      (case âˆˆAâˆªBâ†’âˆˆA+âˆˆB (union S) (union T) xâˆˆâˆªS-âˆª-âˆªT of Î»
        { (inl xâˆˆS) â†’ Prop.map (Î» (A , xâˆˆA , xâˆˆS) â†’ A , xâˆˆA , âˆª-leftâˆˆ  S T xâˆˆS) (âˆˆunionâ†’âˆƒ xâˆˆS)
        ; (inr xâˆˆT) â†’ Prop.map (Î» (A , xâˆˆA , xâˆˆT) â†’ A , xâˆˆA , âˆª-rightâˆˆ S T xâˆˆT) (âˆˆunionâ†’âˆƒ xâˆˆT) })


  unionâˆª-leftâŠ† : {S T : â„™ (â„™ X)} â†’ union S âŠ† union (S âˆª T)
  unionâˆª-leftâŠ† {S = S} {T = T} = subst (union S âŠ†_) (sym unionâˆª) (âˆª-leftâŠ† (union S) (union T))

  unionâˆª-rightâŠ† : {S T : â„™ (â„™ X)} â†’ union T âŠ† union (S âˆª T)
  unionâˆª-rightâŠ† {S = S} {T = T} = subst (union T âŠ†_) (sym unionâˆª) (âˆª-rightâŠ† (union S) (union T))


  union[A] : {A : â„™ X} â†’ union [ A ] â‰¡ A
  union[A] {A = A} = biâŠ†â†’â‰¡ âˆª[A]âŠ†A AâŠ†âˆª[A]
    where
    âˆª[A]âŠ†A : union [ A ] âŠ† A
    âˆª[A]âŠ†A {x = x} xâˆˆâˆª[A] =
      Prop.rec (isPropâˆˆ A)
      (Î» (B , xâˆˆB , Bâˆˆ[A]) â†’
        Prop.rec (isPropâˆˆ A) (Î» Aâ‰¡B â†’ subst (x âˆˆ_) (sym Aâ‰¡B) xâˆˆB)
      (yâˆˆ[x]â†’âˆ¥xâ‰¡yâˆ¥ Bâˆˆ[A])) (âˆˆunionâ†’âˆƒ xâˆˆâˆª[A])

    AâŠ†âˆª[A] : A âŠ† union [ A ]
    AâŠ†âˆª[A] xâˆˆA = âˆƒâ†’âˆˆunion âˆ£ A , xâˆˆA , xâˆˆ[x] âˆ£

  unionâˆª[A] : {S : â„™ (â„™ X)}{A : â„™ X} â†’ union (S âˆª [ A ]) â‰¡ (union S) âˆª A
  unionâˆª[A] {S = S} {A = A} = unionâˆª âˆ™ (Î» i â†’ (union S) âˆª union[A] {A = A} i)
