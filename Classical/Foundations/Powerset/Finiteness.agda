{-

Finiteness of Subset

-}
{-# OPTIONS --safe #-}
module Classical.Foundations.Powerset.Finiteness where

open import Cubical.Foundations.Prelude
open import Cubical.Data.Sum

open import Classical.Axioms
open import Classical.Foundations.Powerset.Base
open import Classical.Foundations.Powerset.Membership
open import Classical.Foundations.Powerset.Boolean
open import Classical.Foundations.Powerset.Properties
open import Classical.Foundations.Powerset.BigOps

private
  variable
    â„“ : Level
    X : Type â„“


module _ â¦ƒ ðŸ¤– : Oracle â¦„ where


  {-

    Predicate of Finiteness

  -}

  -- Inductive definition of being finite

  data isFinSub {â„“ : Level}{X : Type â„“} : â„™ X â†’ Type â„“ where
    isfinâˆ…   : isFinSub âˆ…
    isfinsuc : {A : â„™ X} â†’ isFinSub A â†’ (x : X) â†’ isFinSub (A âˆª [ x ])
    fin-squash : {A : â„™ X} â†’ (p q : isFinSub A) â†’ p â‰¡ q


  isFinSub[x] : {x : X} â†’ isFinSub [ x ]
  isFinSub[x] {x = x} = subst isFinSub (âˆª-lUnit _) (isfinsuc isfinâˆ… x)

  isFinSubâˆª : {A B : â„™ X} â†’ isFinSub A â†’ isFinSub B â†’ isFinSub (A âˆª B)
  isFinSubâˆª p isfinâˆ… = subst isFinSub (sym (âˆª-rUnit _)) p
  isFinSubâˆª {A = A} p (isfinsuc finB y) =
    subst isFinSub (sym (âˆª-Assoc A _ _)) (isfinsuc (isFinSubâˆª p finB) y)
  isFinSubâˆª p (fin-squash q s i) = fin-squash (isFinSubâˆª p q) (isFinSubâˆª p s) i

  isFinSubâŠ† : {A B : â„™ X} â†’ A âŠ† B â†’ isFinSub B â†’ isFinSub A
  isFinSubâŠ† AâŠ†B isfinâˆ… = subst isFinSub (sym (AâŠ†âˆ…â†’Aâ‰¡âˆ… AâŠ†B)) isfinâˆ…
  isFinSubâŠ† {A = A} AâŠ†B (isfinsuc {A = B} finB y) =
    subst isFinSub (sym (âˆ©-âˆª-rDist A _ _) âˆ™ AâŠ†Bâ†’Aâˆ©Bâ‰¡A AâŠ†B) (isFinSubâˆª finAâˆ©B finAâˆ©[y])
    where
    finAâˆ©B : isFinSub (A âˆ© B)
    finAâˆ©B = isFinSubâŠ† (rightâˆˆ-âˆ© A B) finB
    finAâˆ©[y] : isFinSub (A âˆ© [ y ])
    finAâˆ©[y] = case-split (AâŠ†[x]â†’Aâ‰¡âˆ…/[x] (rightâˆˆ-âˆ© A [ y ]))
      where
      case-split : (A âˆ© [ y ] â‰¡ âˆ…) âŠŽ (A âˆ© [ y ] â‰¡ [ y ]) â†’ _
      case-split (inl Aâˆ©[y]â‰¡âˆ…) = subst isFinSub (sym Aâˆ©[y]â‰¡âˆ…) isfinâˆ…
      case-split (inr Aâˆ©[y]â‰¡[y]) = subst isFinSub (sym Aâˆ©[y]â‰¡[y]) isFinSub[x]
  isFinSubâŠ† AâŠ†B (fin-squash p q i) = fin-squash (isFinSubâŠ† AâŠ†B p) (isFinSubâŠ† AâŠ†B q) i

